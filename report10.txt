                    
                    
┌──────────────────┐
│ 41 Code Findings │
└──────────────────┘
                                                                           
  [36m[22m[24m  juice-shop/data/static/codefixes/dbSchemaChallenge_1.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            5┆  ... [1m[24m"SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR description LIKE           
  '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name"[0m) ... [0m                                               
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                           
  [36m[22m[24m  juice-shop/data/static/codefixes/dbSchemaChallenge_3.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           11┆  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                    
  [36m[22m[24m  juice-shop/data/static/codefixes/unionSqlInjectionChallenge_1.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            6┆  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                    
  [36m[22m[24m  juice-shop/data/static/codefixes/unionSqlInjectionChallenge_3.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           10┆  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                        
  [36m[22m[24m  juice-shop/frontend/src/app/search-result/search-result.component.ts [0m
       [1m[24mtypescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust[0m
          Untrusted input could be used to tamper with a web page rendering, which can lead to a           
          Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input         
          executes malicious JavaScript code, leading to issues such as account compromise and             
          sensitive information leakage. Validate the user input, perform contextual output encoding,      
          or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use      
          libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when       
          rendering input.                                                                                 
          Details: https://sg.run/JpBW                                                                     
                                                                                                           
          151┆ this.searchValue = this.sanitizer.bypassSecurityTrustHtml([1m[24mqueryParam[0m) // vuln-code-snippet 
  vuln-line localXssChallenge xssBonusChallenge                                                                     
                                                
  [36m[22m[24m  juice-shop/lib/insecurity.ts [0m
       [1m[24mjavascript.lang.hardcoded.strings.detected-private-key.detected-private-key[0m     
          A secret is hard-coded in the application. Secrets stored in source code, such as      
          credentials, identifiers, and other types of sensitive data, can be leaked and used by 
          internal or external malicious actors. Use environment variables to securely provide   
          credentials and other secrets or retrieve them from a secure vault or Hardware Security
          Module (HSM).                                                                          
          Details: https://sg.run/2dRY                                                           
                                                                                                 
           23┆  ... [1m[24m-----BEGIN RSA PRIVATE                                                                   
  KEY-----\r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX
  43zO6Ko0TFEZx/ ... [0m                                                                                            
            [shortened a long line from output, adjust with --max-chars-per-line]
            ⋮┆----------------------------------------
       [1m[24mjavascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret[0m                  
          A hard-coded credential was detected. It is not recommended to store credentials in source-
          code, as this risks secrets being leaked and used by either an internal or external        
          malicious adversary. It is recommended to use environment variables to securely provide    
          credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). 
          Details: https://sg.run/4xN9                                                               
                                                                                                     
           56┆ export const authorize = (user = {}) => jwt.sign(user, [1m[24mprivateKey[0m, { expiresIn: '6h',      
  algorithm: 'RS256' })                                                                                             
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.session-fixation.session-fixation[0m                                
          Detected `req` argument which enters `res.cookie`, this can lead to session fixation       
          vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to
          unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS).   
          Users should not be able to influence cookies directly, for session cookies, they should be
          generated securely using an approved session management library. If the cookie does need to
          be set by a user, consider using an allow-list based approach to restrict the cookies which
          can be set.                                                                                
          Details: https://sg.run/0qDv                                                               
                                                                                                     
          201┆ res.cookie('token', [1m[24mtoken[0m)
                                              
  [36m[22m[24m  juice-shop/models/index.ts [0m
       [1m[24mjavascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-
       argument[0m                                                                                          
          A secret is hard-coded in the application. Secrets stored in source code, such as                 
          credentials, identifiers, and other types of sensitive data, can be leaked and used by            
          internal or external malicious actors. Use environment variables to securely provide              
          credentials and other secrets or retrieve them from a secure vault or Hardware Security           
          Module (HSM).                                                                                     
          Details: https://sg.run/E7ZB                                                                      
                                                                                                            
           31┆ const sequelize = new Sequelize('database', 'username', '[1m[24mpassword[0m', {
                                                    
  [36m[22m[24m  juice-shop/routes/dataErasure.ts [0m
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           69┆ const filePath: string = path.resolve([1m[24mreq.body.layout[0m).toLowerCase()
                                                   
  [36m[22m[24m  juice-shop/routes/dataExport.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           61┆ db.orders.find([1m[24m{ email: updatedEmail }[0m).then((orders: Array<{
                                                   
  [36m[22m[24m  juice-shop/routes/fileServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           33┆ res.sendFile([1m[24mpath.resolve('ftp/', file)[0m)
                                                  
  [36m[22m[24m  juice-shop/routes/keyServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile([1m[24mpath.resolve('encryptionkeys/', file)[0m)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('encryptionkeys/', [1m[24mfile[0m))
                                                           
  [36m[22m[24m  juice-shop/routes/likeProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ db.reviews.findOne([1m[24m{ _id: id }[0m).then((review: Review) => {
            ⋮┆----------------------------------------
           25┆ [1m[24m{ _id: id }[0m,
            ⋮┆----------------------------------------
           31┆ db.reviews.findOne([1m[24m{ _id: id }[0m).then((review: Review) => {
            ⋮┆----------------------------------------
           42┆ [1m[24m{ _id: id }[0m,
                                                      
  [36m[22m[24m  juice-shop/routes/logfileServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile([1m[24mpath.resolve('logs/', file)[0m)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('logs/', [1m[24mfile[0m))
                                              
  [36m[22m[24m  juice-shop/routes/login.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           36┆  ... [1m[24m`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password =              
  '${security.hash(req.body.password || '')}' AND deletedAt IS NULL[0m`, { m ... [0m                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                               
  [36m[22m[24m  juice-shop/routes/profileImageFileUpload.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           28┆                                                                                                      
  fs.open([1m[24m`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.data.id}.${uploadedFileType.ext
  [0m}`, 'w', function (err, fd) {                                                                                  
                                                              
  [36m[22m[24m  juice-shop/routes/profileImageUrlUpload.ts [0m
       [1m[24mjavascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep[0m                        
          Untrusted input might be used to build an HTTP request, which can lead to a Server-side    
          request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from
          the server side to other internal or external systems. SSRF can lead to unauthorized access
          to sensitive data and, in some cases, allow the attacker to control applications or systems
          that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input
          to craft the base request. Instead, treat it as part of the path or query parameter and    
          encode it appropriately. When user input is necessary to prepare the HTTP request, perform 
          strict input validation. Additionally, whenever possible, use allowlists to only interact  
          with expected, trusted domains.                                                            
          Details: https://sg.run/Wxn4                                                               
                                                                                                     
           23┆ .get([1m[24murl[0m)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.security.audit.express-ssrf.express-ssrf[0m                          
          The following request request.get() was found to be crafted from user-input `req` which can 
          lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible
          to not allow user-input to craft the base request, but to be treated as part of the path or 
          query parameter. When user-input is necessary to craft the request, it is recommeneded to   
          follow OWASP best practices to prevent abuse.                                               
          Details: https://sg.run/0PNw                                                                
                                                                                                      
           23┆ .get([1m[24murl[0m)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           31┆                                                                                                      
  imageRequest.pipe(fs.createWriteStream([1m[24m`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.
  ata.id}.${ext[0m}`))                                                                                              
                                                         
  [36m[22m[24m  juice-shop/routes/quarantineServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14┆ res.sendFile([1m[24mpath.resolve('ftp/quarantine/', file)[0m)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14┆ res.sendFile(path.resolve('ftp/quarantine/', [1m[24mfile[0m))
                                                 
  [36m[22m[24m  juice-shop/routes/redirect.ts [0m
       [1m[24mjavascript.express.security.audit.express-open-redirect.express-open-redirect[0m        
          The application redirects to a URL specified by user-supplied input `query` that is not     
          validated. This could redirect users to malicious locations. Consider using an allow-list   
          approach to validate URLs, or warn users they are being redirected to a third-party website.
          Details: https://sg.run/EpoP                                                                
                                                                                                      
           19┆ res.redirect([1m[24mtoUrl[0m as string)
            ⋮┆----------------------------------------
       [1m[24mjavascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep[0m               
          The application builds a URL using user-controlled input which can lead to an open redirect 
          vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain.
          Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or      
          redirecting to a malicious domain for activities such as phishing to capture users'         
          credentials. To prevent this vulnerability perform strict input validation of the domain    
          against an allowlist of approved domains. Notify a user in your application that they are   
          leaving the website. Display a domain where they are redirected to the user. A user can then
          either accept or deny the redirect to an untrusted site.                                    
          Details: https://sg.run/BDbW                                                                
                                                                                                      
           19┆ res.redirect([1m[24mtoUrl as string[0m)
                                               
  [36m[22m[24m  juice-shop/routes/search.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           23┆  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) // vuln-code- ... [0m                                  
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                           
  [36m[22m[24m  juice-shop/routes/showProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           34┆ db.reviews.find([1m[24m{ $where: 'this.product == ' + id }[0m).then((reviews: Review[]) => {
                                                   
  [36m[22m[24m  juice-shop/routes/trackOrder.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ db.orders.find([1m[24m{ $where: `this.orderId === '${id}'` }[0m).then((order: any) => {
                                                             
  [36m[22m[24m  juice-shop/routes/updateProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18┆ [1m[24m{ _id: req.body.id }[0m, // vuln-code-snippet vuln-line noSqlReviewsChallenge                 
  forgedReviewChallenge                                                                                             
                                                    
  [36m[22m[24m  juice-shop/routes/userProfile.ts [0m
       [1m[24mjavascript.express.security.express-insecure-template-usage.express-insecure-template-usage[0m
          User data from `req` is being compiled into the template, which can lead to a Server Side         
          Template Injection (SSTI) vulnerability.                                                          
          Details: https://sg.run/b49v                                                                      
                                                                                                            
           56┆ const fn = [1m[24mpug.compile(template)[0m
                                                      
  [36m[22m[24m  juice-shop/routes/vulnCodeFixes.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           79┆ if (fs.existsSync([1m[24m'./data/static/codefixes/' + key + '.info.yml'[0m)) {
            ⋮┆----------------------------------------
           80┆ const codingChallengeInfos = yaml.load(fs.readFileSync([1m[24m'./data/static/codefixes/' + key +     
  '.info.yml'[0m, 'utf8'))                                                                                          
                                                        
  [36m[22m[24m  juice-shop/routes/vulnCodeSnippet.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           93┆ if (fs.existsSync([1m[24m'./data/static/codefixes/' + key + '.info.yml'[0m)) {
            ⋮┆----------------------------------------
           94┆ const codingChallengeInfos = yaml.load(fs.readFileSync([1m[24m'./data/static/codefixes/' + key +     
  '.info.yml'[0m, 'utf8'))                                                                                          
                                        
  [36m[22m[24m  juice-shop/server.ts [0m
       [1m[24mjavascript.express.security.audit.express-check-directory-listing.express-check-directory-
       listing[0m                                                                                       
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories  
          and files. It is recommended to disable directory listing unless it is a public resource. If  
          you need directory listing, ensure that sensitive files are inaccessible when querying the    
          resource.                                                                                     
          Details: https://sg.run/DX2G                                                                  
                                                                                                        
          245┆ [1m[24mapp.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))[0m //               
  vuln-code-snippet vuln-line directoryListingChallenge                                                             
            ⋮┆----------------------------------------
          250┆ [1m[24mapp.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true,  
  view: 'details' }))[0m                                                                                            
            ⋮┆----------------------------------------
          254┆ [1m[24mapp.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view:        
  'details' }))[0m // vuln-code-snippet vuln-line accessLogDisclo ... [0m                                           
            [shortened a long line from output, adjust with --max-chars-per-line]

