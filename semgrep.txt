                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 84 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                           
  [36m[22m[24m  juice-shop/Gruntfile.js [0m
       [1m[24mcontrib.nodejsscan.crypto_node.node_md5[0m                                            
          The MD5 hashing algorithm is considered to be weak. If this is used in any sensitive      
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`           
          Details: https://sg.run/dKBX                                                              
                                                                                                    
           76‚îÜ const md5 = [1m[24mcrypto.createHash('md5')[0m
                                                  
  [36m[22m[24m  juice-shop/data/datacreator.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           41‚îÜ const filePath = path.resolve([1m[24m'./data/static/' + file + '.yml'[0m)
                                                                           
  [36m[22m[24m  juice-shop/data/static/codefixes/dbSchemaChallenge_1.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            5‚îÜ  ... [1m[24m"SELECT * FROM Products WHERE ((name LIKE '%"+criteria+"%' OR description LIKE           
  '%"+criteria+"%') AND deletedAt IS NULL) ORDER BY name"[0m) ... [0m                                               
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                           
  [36m[22m[24m  juice-shop/data/static/codefixes/dbSchemaChallenge_3.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           11‚îÜ  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                             
  [36m[22m[24m  juice-shop/data/static/codefixes/restfulXssChallenge_2.ts [0m
       [1m[24mjavascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization[0m     
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                 
          `tableData[i].description`. Manually sanitizing input through a manually built list can be
          circumvented in many situations, and it's better to use a well known sanitization library 
          such as `sanitize-html` or `DOMPurify`.                                                   
          Details: https://sg.run/AzoB                                                              
                                                                                                    
           59‚îÜ tableData[i].description = [1m[24mtableData[i].description.replaceAll('<', '&lt;')[0m.replaceAll('>',
  '&gt;')                                                                                                           
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.audit.detect-replaceall-sanitization.detect-replaceall-sanitization[0m    
          Detected a call to `replaceAll()` in an attempt to HTML escape the string                
          `tableData[i].description.replaceAll('<', '&lt;')`. Manually sanitizing input through a  
          manually built list can be circumvented in many situations, and it's better to use a well
          known sanitization library such as `sanitize-html` or `DOMPurify`.                       
          Details: https://sg.run/AzoB                                                             
                                                                                                   
           59‚îÜ tableData[i].description = [1m[24mtableData[i].description.replaceAll('<', '&lt;').replaceAll('>',   
  '&gt;')[0m                                                                                                        
                                                                                    
  [36m[22m[24m  juice-shop/data/static/codefixes/unionSqlInjectionChallenge_1.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
            6‚îÜ  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                    
  [36m[22m[24m  juice-shop/data/static/codefixes/unionSqlInjectionChallenge_3.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           10‚îÜ  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) ... [0m                                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                    
  [36m[22m[24m  juice-shop/data/static/users.yml [0m
       [1m[24mgeneric.secrets.security.detected-generic-secret.detected-generic-secret[0m
          Generic Secret detected                                                        
          Details: https://sg.run/l2o5                                                   
                                                                                         
          150‚îÜ totp[1m[24mSecret: IFTXE3SPOEYVURT2MRYGI52TKJ4HC3KH[0m
                                                      
  [36m[22m[24m  juice-shop/docker-compose.test.yml [0m
       [1m[24myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m                  
          Service 'app' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                      
          Details: https://sg.run/0n8q                                                             
                                                                                                   
            7‚îÜ [1m[24mapp[0m:
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m 
          Service 'app' is running with a writable root filesystem. This may allow malicious          
          applications to download and run additional payloads, or modify container files. If an      
          application inside a container has to save something temporarily consider using a tmpfs. Add
          'read_only: true' to this service to prevent this.                                          
          Details: https://sg.run/e4JE                                                                
                                                                                                      
            7‚îÜ [1m[24mapp[0m:
                                                                 
  [36m[22m[24m  juice-shop/frontend/src/app/app.guard.spec.ts [0m
       [1m[24mgeneric.secrets.security.detected-jwt-token.detected-jwt-token[0m
          JWT token detected                                                   
          Details: https://sg.run/05N5                                         
                                                                               
           40‚îÜ  ...                                                                                                 
  [1m[24meyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5M 
  DIyfQ.[0mSflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_ ... [0m                                                              
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                                                             
  [36m[22m[24m  juice-shop/frontend/src/app/last-login-ip/last-login-ip.component.spec.ts [0m
       [1m[24mgeneric.secrets.security.detected-jwt-token.detected-jwt-token[0m
          JWT token detected                                                   
          Details: https://sg.run/05N5                                         
                                                                               
           50‚îÜ  ...                                                                                                 
  [1m[24meyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7Imxhc3RMb2dpbklwIjoiMS4yLjMuNCJ9fQ.[0mRAkmdqwNypuOxv3SDj  
  PO4xMKvd1CddKvDFYDBfUt3bg') ... [0m                                                                               
            [shortened a long line from output, adjust with --max-chars-per-line]
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ localStorage.setItem('token',                                                                        
  '[1m[24meyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7fX0.[0mbVBhvll6IaeR3aUdoOeyR8YZe2S2DfhGAxTGfd9enLw')     
                                                                                        
  [36m[22m[24m  juice-shop/frontend/src/app/search-result/search-result.component.ts [0m
       [1m[24mtypescript.angular.angular-route-bypass-security-trust.angular-route-bypass-security-trust[0m
          Untrusted input could be used to tamper with a web page rendering, which can lead to a           
          Cross-site scripting (XSS) vulnerability. XSS vulnerabilities occur when untrusted input         
          executes malicious JavaScript code, leading to issues such as account compromise and             
          sensitive information leakage. Validate the user input, perform contextual output encoding,      
          or sanitize the input. A popular library used to prevent XSS is DOMPurify. You can also use      
          libraries and frameworks such as Angular, Vue, and React, which offer secure defaults when       
          rendering input.                                                                                 
          Details: https://sg.run/JpBW                                                                     
                                                                                                           
          151‚îÜ this.searchValue = this.sanitizer.bypassSecurityTrustHtml([1m[24mqueryParam[0m) // vuln-code-snippet 
  vuln-line localXssChallenge xssBonusChallenge                                                                     
                                                                                 
  [36m[22m[24m  juice-shop/frontend/src/hacking-instructor/helpers/helpers.ts [0m
       [1m[24mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-
       loop[0m                                                                                                
          Possibility of prototype polluting function detected. By adding or modifying attributes of          
          an object prototype, it is possible to create attributes that exist on every object, or             
          replace critical attributes with malicious ones. This can be problematic if the software            
          depends on existence or non-existence of certain attributes, or uses pre-defined attributes         
          of object prototype (such as hasOwnProperty, toString or valueOf). Possible mitigations             
          might be: freezing the object prototype, using an object without prototypes (via                    
          Object.create(null) ), blocking modifications of attributes that resolve to object                  
          prototype, using Map instead of object.                                                             
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           36‚îÜ [1m[24mreplacementValue = replacementValue[property][0m
                                                                       
  [36m[22m[24m  juice-shop/frontend/src/hacking-instructor/index.ts [0m
       [1m[24mjavascript.browser.security.insecure-document-method.insecure-document-method[0m   
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an
          anti-pattern that can lead to XSS vulnerabilities                                      
          Details: https://sg.run/LwA9                                                           
                                                                                                 
          107‚îÜ [1m[24mtextBox.innerHTML = snarkdown(hint.text)[0m
                                                      
  [36m[22m[24m  juice-shop/frontend/src/index.html [0m
       [1m[24mhtml.security.audit.missing-integrity.missing-integrity[0m                             
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity'        
          attribute allows for the browser to verify that externally hosted files (for example from a
          CDN) are delivered without unexpected manipulation. Without this attribute, if an attacker 
          can modify the externally hosted resource, this could lead to XSS and other types of       
          attacks. To prevent this, include the base64-encoded cryptographic hash of the resource    
          (file) you‚Äôre telling the browser to fetch in the 'integrity' attribute for all externally 
          hosted files.                                                                              
          Details: https://sg.run/krXA                                                               
                                                                                                     
           14‚îÜ [1m[24m<link rel="stylesheet" type="text/css"                                                        
  href="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.css" />[0m                          
            ‚ãÆ‚îÜ----------------------------------------
           15‚îÜ [1m[24m<script                                                                                       
  src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/3.1.0/cookieconsent.min.js"></script>[0m                     
            ‚ãÆ‚îÜ----------------------------------------
           16‚îÜ [1m[24m<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>[0m
                                                      
  [36m[22m[24m  juice-shop/lib/codingChallenges.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           24‚îÜ files.map(file => path.resolve([1m[24mcurrPath[0m, file))
            ‚ãÆ‚îÜ----------------------------------------
           24‚îÜ files.map(file => path.resolve(currPath, [1m[24mfile[0m))
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m   
          RegExp() called with a `challengeKey` function argument, this might allow an attacker to    
          cause a Regular Expression Denial-of-Service (ReDoS) within your application as RegExP      
          blocks the main thread. For this reason, it is recommended to use hardcoded regexes instead.
          If your regex is run on user-controlled input, consider performing input validation or use a
          regex checking/sanitization library such as https://www.npmjs.com/package/recheck to verify 
          that the regex does not appear vulnerable to ReDoS.                                         
          Details: https://sg.run/gr65                                                                
                                                                                                      
           76‚îÜ if ([1m[24mnew RegExp(`vuln-code-snippet vuln-line.*${challengeKey}`)[0m.exec(lines[i]) != null) {
            ‚ãÆ‚îÜ----------------------------------------
           78‚îÜ } else if ([1m[24mnew RegExp(`vuln-code-snippet neutral-line.*${challengeKey}`)[0m.exec(lines[i]) != 
  null) {                                                                                                           
                                                
  [36m[22m[24m  juice-shop/lib/insecurity.ts [0m
       [1m[24mjavascript.lang.hardcoded.strings.detected-private-key.detected-private-key[0m     
          A secret is hard-coded in the application. Secrets stored in source code, such as      
          credentials, identifiers, and other types of sensitive data, can be leaked and used by 
          internal or external malicious actors. Use environment variables to securely provide   
          credentials and other secrets or retrieve them from a secure vault or Hardware Security
          Module (HSM).                                                                          
          Details: https://sg.run/2dRY                                                           
                                                                                                 
           23‚îÜ  ... [1m[24m-----BEGIN RSA PRIVATE                                                                   
  KEY-----\r\nMIICXAIBAAKBgQDNwqLEe9wgTXCbC7+RPdDbBbeqjdbs4kOPOIGzqLpXvJXlxxW8iMz0EaM4BKUqYsIa+ndv3NAn2RxCd5ubVdJJcX
  43zO6Ko0TFEZx/ ... [0m                                                                                            
            [shortened a long line from output, adjust with --max-chars-per-line]
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mcontrib.nodejsscan.crypto_node.node_md5[0m                                            
          The MD5 hashing algorithm is considered to be weak. If this is used in any sensitive      
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`           
          Details: https://sg.run/dKBX                                                              
                                                                                                    
           43‚îÜ export const hash = (data: string) => [1m[24mcrypto.createHash('md5')[0m.update(data).digest('hex')
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key[0m            
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate
          option such as reading the secret from a config file or using an environment variable. 
          Details: https://sg.run/K9bn                                                           
                                                                                                 
           44‚îÜ export const hmac = (data: string) => [1m[24mcrypto.createHmac('sha256',                             
  'pa4qacea4VK9t9nGv7yZtwmj')[0m.update(data).digest('hex')                                                         
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.jsonwebtoken.security.jwt-hardcode.hardcoded-jwt-secret[0m                  
          A hard-coded credential was detected. It is not recommended to store credentials in source-
          code, as this risks secrets being leaked and used by either an internal or external        
          malicious adversary. It is recommended to use environment variables to securely provide    
          credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). 
          Details: https://sg.run/4xN9                                                               
                                                                                                     
           56‚îÜ export const authorize = (user = {}) => jwt.sign(user, [1m[24mprivateKey[0m, { expiresIn: '6h',      
  algorithm: 'RS256' })                                                                                             
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.hardcoded-hmac-key.hardcoded-hmac-key[0m            
          Detected a hardcoded hmac key. Avoid hardcoding secrets and consider using an alternate
          option such as reading the secret from a config file or using an environment variable. 
          Details: https://sg.run/K9bn                                                           
                                                                                                 
          158‚îÜ const hmac = [1m[24mcrypto.createHmac('sha256', privateKey)[0m
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.session-fixation.session-fixation[0m                                
          Detected `req` argument which enters `res.cookie`, this can lead to session fixation       
          vulnerabilities if an attacker can control the cookie value. This vulnerability can lead to
          unauthorized access to accounts, and in some esoteric cases, Cross-Site-Scripting (XSS).   
          Users should not be able to influence cookies directly, for session cookies, they should be
          generated securely using an approved session management library. If the cookie does need to
          be set by a user, consider using an allow-list based approach to restrict the cookies which
          can be set.                                                                                
          Details: https://sg.run/0qDv                                                               
                                                                                                     
          201‚îÜ res.cookie('token', [1m[24mtoken[0m)
                                                                                  
  [36m[22m[24m  juice-shop/lib/startup/restoreOverwrittenFilesWithOriginals.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           30‚îÜ files.map((filename: string) => copyFile(filename, path.resolve('i18n/',                             
  [1m[24mfilename.substring(filename.lastIndexOf('/') + 1)[0m)))                                                    
                                                                   
  [36m[22m[24m  juice-shop/lib/startup/validatePreconditions.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
          116‚îÜ return access(path.resolve([1m[24mpathRelativeToProjectRoot[0m)).then(() => {
                                           
  [36m[22m[24m  juice-shop/lib/utils.ts [0m
       [1m[24mjavascript.jssha.jssha-sha1.jssha-sha1[0m                                             
          The SHA1 hashing algorithm is considered to be weak. If this is used in any sensitive     
          operation such as password hashing, or is used to ensure data integrity (collision        
          sensitive) then you should use a stronger hashing algorithm. For passwords, consider using
          `Argon2id`, `scrypt`, or `bcrypt`. For data integrity, consider using `SHA-256`.          
          Details: https://sg.run/ERyN                                                              
                                                                                                    
           97‚îÜ const shaObj = [1m[24mnew jsSHA('SHA-1', 'TEXT')[0m // eslint-disable-line new-cap
                                              
  [36m[22m[24m  juice-shop/models/index.ts [0m
       [1m[24mjavascript.sequelize.node-sequelize-hardcoded-secret-argument.node-sequelize-hardcoded-secret-
       argument[0m                                                                                          
          A secret is hard-coded in the application. Secrets stored in source code, such as                 
          credentials, identifiers, and other types of sensitive data, can be leaked and used by            
          internal or external malicious actors. Use environment variables to securely provide              
          credentials and other secrets or retrieve them from a secure vault or Hardware Security           
          Module (HSM).                                                                                     
          Details: https://sg.run/E7ZB                                                                      
                                                                                                            
           31‚îÜ const sequelize = new Sequelize('database', 'username', '[1m[24mpassword[0m', {
                                                 
  [36m[22m[24m  juice-shop/routes/b2bOrder.ts [0m
       [1m[24mjavascript.express.security.audit.express-detect-notevil-usage.express-detect-notevil-usage[0m
          Detected usage of the `notevil` package, which is unmaintained and has vulnerabilities.           
          Using any sort of `eval()` functionality can be very dangerous, but if you must, the `eval`       
          package is an up to date alternative. Be sure that only trusted input reaches an `eval()`         
          function.                                                                                         
          Details: https://sg.run/W70E                                                                      
                                                                                                            
           22‚îÜ [1m[24mvm.runInContext('safeEval(orderLinesData)', sandbox, { timeout: 2000 })[0m
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.vm-injection.vm-runincontext-context-injection[0m
          Make sure that unverified user data can not reach vm.runInContext.                  
          Details: https://sg.run/9oey                                                        
                                                                                              
           22‚îÜ vm.runInContext('safeEval(orderLinesData)', [1m[24msandbox[0m, { timeout: 2000 })
                                                
  [36m[22m[24m  juice-shop/routes/captcha.ts [0m
       [1m[24mjavascript.browser.security.eval-detected.eval-detected[0m                             
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If
          this content can be input from outside the program, this may be a code injection           
          vulnerability. Ensure evaluated content is not definable by external sources.              
          Details: https://sg.run/7ope                                                               
                                                                                                     
           23‚îÜ const answer = [1m[24meval(expression)[0m.toString() // eslint-disable-line no-eval
                                                    
  [36m[22m[24m  juice-shop/routes/dataErasure.ts [0m
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           69‚îÜ const filePath: string = path.resolve([1m[24mreq.body.layout[0m).toLowerCase()
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           69‚îÜ const filePath: string = path.resolve([1m[24mreq.body.layout[0m).toLowerCase()
                                                   
  [36m[22m[24m  juice-shop/routes/dataExport.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           61‚îÜ db.orders.find([1m[24m{ email: updatedEmail }[0m).then((orders: Array<{
                                                   
  [36m[22m[24m  juice-shop/routes/fileServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           33‚îÜ res.sendFile([1m[24mpath.resolve('ftp/', file)[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           33‚îÜ res.sendFile(path.resolve('ftp/', [1m[24mfile[0m))
                                                   
  [36m[22m[24m  juice-shop/routes/fileUpload.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           29‚îÜ const tempFile = path.join(os.tmpdir(), [1m[24mfilename[0m)
            ‚ãÆ‚îÜ----------------------------------------
           39‚îÜ const absolutePath = path.resolve([1m[24m'uploads/complaints/' + fileName[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-libxml-vm-noent.express-libxml-vm-noent[0m  
          Detected use of parseXml() function with the `noent` field set to `true`. This can lead to
          an XML External Entities (XXE) attack if untrusted data is passed into it.                
          Details: https://sg.run/n8Ag                                                              
                                                                                                    
           80‚îÜ const xmlDoc = [1m[24mvm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true, nocdata: 
  true })', sandbox, { timeout: 2000 })[0m                                                                          
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.vm-injection.vm-runincontext-context-injection[0m
          Make sure that unverified user data can not reach vm.runInContext.                  
          Details: https://sg.run/9oey                                                        
                                                                                              
           80‚îÜ const xmlDoc = vm.runInContext('libxml.parseXml(data, { noblanks: true, noent: true, nocdata: true   
  })', [1m[24msandbox[0m, { timeout: 2000 })                                                                        
                                                  
  [36m[22m[24m  juice-shop/routes/keyServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile([1m[24mpath.resolve('encryptionkeys/', file)[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14‚îÜ res.sendFile(path.resolve('encryptionkeys/', [1m[24mfile[0m))
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14‚îÜ res.sendFile(path.resolve('encryptionkeys/', [1m[24mfile[0m))
                                                           
  [36m[22m[24m  juice-shop/routes/likeProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18‚îÜ db.reviews.findOne([1m[24m{ _id: id }[0m).then((review: Review) => {
            ‚ãÆ‚îÜ----------------------------------------
           25‚îÜ [1m[24m{ _id: id }[0m,
            ‚ãÆ‚îÜ----------------------------------------
           31‚îÜ db.reviews.findOne([1m[24m{ _id: id }[0m).then((review: Review) => {
            ‚ãÆ‚îÜ----------------------------------------
           42‚îÜ [1m[24m{ _id: id }[0m,
                                                      
  [36m[22m[24m  juice-shop/routes/logfileServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile([1m[24mpath.resolve('logs/', file)[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14‚îÜ res.sendFile(path.resolve('logs/', [1m[24mfile[0m))
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14‚îÜ res.sendFile(path.resolve('logs/', [1m[24mfile[0m))
                                              
  [36m[22m[24m  juice-shop/routes/login.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           36‚îÜ  ... [1m[24m`SELECT * FROM Users WHERE email = '${req.body.email || ''}' AND password =              
  '${security.hash(req.body.password || '')}' AND deletedAt IS NULL[0m`, { m ... [0m                                
            [shortened a long line from output, adjust with --max-chars-per-line]
                                              
  [36m[22m[24m  juice-shop/routes/order.ts [0m
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           46‚îÜ const fileWriter = doc.pipe(fs.createWriteStream(path.join('ftp/', [1m[24mpdfFile[0m)))
                                                               
  [36m[22m[24m  juice-shop/routes/profileImageFileUpload.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           28‚îÜ                                                                                                      
  fs.open([1m[24m`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.data.id}.${uploadedFileType.ext
  [0m}`, 'w', function (err, fd) {                                                                                  
                                                              
  [36m[22m[24m  juice-shop/routes/profileImageUrlUpload.ts [0m
       [1m[24mjavascript.express.request.ssrf-deepsemgrep.ssrf-deepsemgrep[0m                        
          Untrusted input might be used to build an HTTP request, which can lead to a Server-side    
          request forgery (SSRF) vulnerability. SSRF allows an attacker to send crafted requests from
          the server side to other internal or external systems. SSRF can lead to unauthorized access
          to sensitive data and, in some cases, allow the attacker to control applications or systems
          that trust the vulnerable service. To prevent this vulnerability, avoid allowing user input
          to craft the base request. Instead, treat it as part of the path or query parameter and    
          encode it appropriately. When user input is necessary to prepare the HTTP request, perform 
          strict input validation. Additionally, whenever possible, use allowlists to only interact  
          with expected, trusted domains.                                                            
          Details: https://sg.run/Wxn4                                                               
                                                                                                     
           23‚îÜ .get([1m[24murl[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-ssrf.express-ssrf[0m                          
          The following request request.get() was found to be crafted from user-input `req` which can 
          lead to Server-Side Request Forgery (SSRF) vulnerabilities. It is recommended where possible
          to not allow user-input to craft the base request, but to be treated as part of the path or 
          query parameter. When user-input is necessary to craft the request, it is recommeneded to   
          follow OWASP best practices to prevent abuse.                                               
          Details: https://sg.run/0PNw                                                                
                                                                                                      
           23‚îÜ .get([1m[24murl[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           31‚îÜ                                                                                                      
  imageRequest.pipe(fs.createWriteStream([1m[24m`frontend/dist/frontend/assets/public/images/uploads/${loggedInUser.
  ata.id}.${ext[0m}`))                                                                                              
                                                         
  [36m[22m[24m  juice-shop/routes/quarantineServer.ts [0m
       [1m[24mjavascript.express.security.audit.express-res-sendfile.express-res-sendfile[0m        
          The application processes user-input, this is passed to res.sendFile which can allow an   
          attacker to arbitrarily read files on the system through path traversal. It is recommended
          to perform input validation in addition to canonicalizing the path. This allows you to    
          validate the path against the intended directory it should be accessing.                  
          Details: https://sg.run/7DJk                                                              
                                                                                                    
           14‚îÜ res.sendFile([1m[24mpath.resolve('ftp/quarantine/', file)[0m)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-path-join-resolve-traversal.express-path-join-resolve-
       traversal[0m                                                                                           
          Possible writing outside of the destination, make sure that the target path is nested in the        
          intended destination                                                                                
          Details: https://sg.run/weRn                                                                        
                                                                                                              
           14‚îÜ res.sendFile(path.resolve('ftp/quarantine/', [1m[24mfile[0m))
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-
       traversal[0m                                                                                       
          Detected possible user input going into a `path.join` or `path.resolve` function. This could    
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary       
          files stored in the file system. Instead, be sure to sanitize or validate user input first.     
          Details: https://sg.run/OPqk                                                                    
                                                                                                          
           14‚îÜ res.sendFile(path.resolve('ftp/quarantine/', [1m[24mfile[0m))
                                                 
  [36m[22m[24m  juice-shop/routes/redirect.ts [0m
       [1m[24mjavascript.express.security.audit.express-open-redirect.express-open-redirect[0m        
          The application redirects to a URL specified by user-supplied input `query` that is not     
          validated. This could redirect users to malicious locations. Consider using an allow-list   
          approach to validate URLs, or warn users they are being redirected to a third-party website.
          Details: https://sg.run/EpoP                                                                
                                                                                                      
           19‚îÜ res.redirect([1m[24mtoUrl[0m as string)
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.open-redirect-deepsemgrep.open-redirect-deepsemgrep[0m               
          The application builds a URL using user-controlled input which can lead to an open redirect 
          vulnerability. An attacker can manipulate the URL and redirect users to an arbitrary domain.
          Open redirect vulnerabilities can lead to issues such as Cross-site scripting (XSS) or      
          redirecting to a malicious domain for activities such as phishing to capture users'         
          credentials. To prevent this vulnerability perform strict input validation of the domain    
          against an allowlist of approved domains. Notify a user in your application that they are   
          leaving the website. Display a domain where they are redirected to the user. A user can then
          either accept or deny the redirect to an untrusted site.                                    
          Details: https://sg.run/BDbW                                                                
                                                                                                      
           19‚îÜ res.redirect([1m[24mtoUrl as string[0m)
                                               
  [36m[22m[24m  juice-shop/routes/search.ts [0m
       [1m[24mjavascript.sequelize.security.audit.sequelize-injection-express.express-sequelize-injection[0m
          Detected a sequelize statement that is tainted by user-input. This could lead to SQL              
          injection if the variable is user-controlled and is not properly sanitized. In order to           
          prevent SQL injection, it is recommended to use parameterized queries or prepared                 
          statements.                                                                                       
          Details: https://sg.run/gjoe                                                                      
                                                                                                            
           23‚îÜ  ... [1m[24m`SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE            
  '%${criteria}%') AND deletedAt IS NULL) ORDER BY name[0m`) // vuln-code- ... [0m                                  
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                           
  [36m[22m[24m  juice-shop/routes/showProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           34‚îÜ db.reviews.find([1m[24m{ $where: 'this.product == ' + id }[0m).then((reviews: Review[]) => {
                                                   
  [36m[22m[24m  juice-shop/routes/trackOrder.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18‚îÜ db.orders.find([1m[24m{ $where: `this.orderId === '${id}'` }[0m).then((order: any) => {
                                                             
  [36m[22m[24m  juice-shop/routes/updateProductReviews.ts [0m
       [1m[24mjavascript.express.mongodb.express-mongo-nosqli.express-mongo-nosqli[0m                 
          Detected a `../data/mongodb` statement that comes from a `req` argument. This could lead to 
          NoSQL injection if the variable is user-controlled and is not properly sanitized. Be sure to
          properly sanitize the data if you absolutely must pass request data into a mongo query.     
          Details: https://sg.run/Qqxq                                                                
                                                                                                      
           18‚îÜ [1m[24m{ _id: req.body.id }[0m, // vuln-code-snippet vuln-line noSqlReviewsChallenge                 
  forgedReviewChallenge                                                                                             
                                                    
  [36m[22m[24m  juice-shop/routes/userProfile.ts [0m
       [1m[24mjavascript.browser.security.eval-detected.eval-detected[0m                             
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If
          this content can be input from outside the program, this may be a code injection           
          vulnerability. Ensure evaluated content is not definable by external sources.              
          Details: https://sg.run/7ope                                                               
                                                                                                     
           36‚îÜ username = [1m[24meval(code)[0m // eslint-disable-line no-eval
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.express-insecure-template-usage.express-insecure-template-usage[0m
          User data from `req` is being compiled into the template, which can lead to a Server Side         
          Template Injection (SSTI) vulnerability.                                                          
          Details: https://sg.run/b49v                                                                      
                                                                                                            
           56‚îÜ const fn = [1m[24mpug.compile(template)[0m
                                                     
  [36m[22m[24m  juice-shop/routes/videoHandler.ts [0m
       [1m[24mjavascript.lang.security.audit.unknown-value-with-script-tag.unknown-value-with-script-tag[0m
          Cannot determine what 'subs' is and it is used with a '<script>' tag. This could be              
          susceptible to cross-site scripting (XSS). Ensure 'subs' is not externally controlled, or        
          sanitize this data.                                                                              
          Details: https://sg.run/1Zy1                                                                     
                                                                                                           
           57‚îÜ challengeUtils.solveIf(challenges.videoXssChallenge, () => { return utils.contains([1m[24msubs[0m,   
  '</script><script>alert(`xss`)</script>') })                                                                      
            ‚ãÆ‚îÜ----------------------------------------
           69‚îÜ  ... [1m[24msubs[0m + '</script>') ... [0m
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                      
  [36m[22m[24m  juice-shop/routes/vulnCodeFixes.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           79‚îÜ if (fs.existsSync([1m[24m'./data/static/codefixes/' + key + '.info.yml'[0m)) {
            ‚ãÆ‚îÜ----------------------------------------
           80‚îÜ const codingChallengeInfos = yaml.load(fs.readFileSync([1m[24m'./data/static/codefixes/' + key +     
  '.info.yml'[0m, 'utf8'))                                                                                          
                                                        
  [36m[22m[24m  juice-shop/routes/vulnCodeSnippet.ts [0m
       [1m[24mjavascript.express.express-fs-filename.express-fs-filename[0m                           
          The application builds a file path from potentially untrusted data, which can lead to a path
          traversal vulnerability. An attacker can manipulate the file path which the application uses
          to access files. If the application does not validate user input and sanitize file paths,   
          sensitive files such as configuration or user data can be accessed, potentially creating or 
          overwriting files. To prevent this vulnerability, validate and sanitize any input that is   
          used to create references to file paths. Also, enforce strict file access controls. For     
          example, choose privileges allowing public-facing applications to access only the required  
          files.                                                                                      
          Details: https://sg.run/0B9W                                                                
                                                                                                      
           93‚îÜ if (fs.existsSync([1m[24m'./data/static/codefixes/' + key + '.info.yml'[0m)) {
            ‚ãÆ‚îÜ----------------------------------------
           94‚îÜ const codingChallengeInfos = yaml.load(fs.readFileSync([1m[24m'./data/static/codefixes/' + key +     
  '.info.yml'[0m, 'utf8'))                                                                                          
                                        
  [36m[22m[24m  juice-shop/server.ts [0m
       [1m[24mjavascript.express.security.audit.express-check-csurf-middleware-usage.express-check-csurf-
       middleware-usage[0m                                                                               
          A CSRF middleware was not detected in your express application. Ensure you are either using    
          one such as `csurf` or `csrf` (see rule references) and/or you are properly doing CSRF         
          validation in your routes with a token or cookies.                                             
          Details: https://sg.run/BxzR                                                                   
                                                                                                         
           96‚îÜ const [1m[24mapp = express()[0m
            ‚ãÆ‚îÜ----------------------------------------
       [1m[24mjavascript.express.security.audit.express-check-directory-listing.express-check-directory-
       listing[0m                                                                                       
          Directory listing/indexing is enabled, which may lead to disclosure of sensitive directories  
          and files. It is recommended to disable directory listing unless it is a public resource. If  
          you need directory listing, ensure that sensitive files are inaccessible when querying the    
          resource.                                                                                     
          Details: https://sg.run/DX2G                                                                  
                                                                                                        
          245‚îÜ [1m[24mapp.use('/ftp', serveIndexMiddleware, serveIndex('ftp', { icons: true }))[0m //               
  vuln-code-snippet vuln-line directoryListingChallenge                                                             
            ‚ãÆ‚îÜ----------------------------------------
          250‚îÜ [1m[24mapp.use('/encryptionkeys', serveIndexMiddleware, serveIndex('encryptionkeys', { icons: true,  
  view: 'details' }))[0m                                                                                            
            ‚ãÆ‚îÜ----------------------------------------
          254‚îÜ [1m[24mapp.use('/support/logs', serveIndexMiddleware, serveIndex('logs', { icons: true, view:        
  'details' }))[0m // vuln-code-snippet vuln-line accessLogDisclo ... [0m                                           
            [shortened a long line from output, adjust with --max-chars-per-line]
                                                       
  [36m[22m[24m  juice-shop/views/promotionVideo.pug [0m
       [1m[24mjavascript.express.security.audit.xss.pug.explicit-unescape.template-explicit-unescape[0m
          Detected an explicit unescape in a Pug template, using either '!=' or '!{...}'. If external  
          data can reach these locations, your application is exposed to a cross-site scripting (XSS)  
          vulnerability. If you must do this, ensure no external data can reach this location.         
          Details: https://sg.run/3xbe                                                                 
                                                                                                       
           79‚îÜ [1m[24mif (splitted.length != 2) {[0m

